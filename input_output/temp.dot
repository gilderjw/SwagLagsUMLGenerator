digraph memes {rankdir=BT;
RecursionArgumentProcessor [
shape ="record",
label = "{RecursionArgumentProcessor||+  process(String[]) : CodeProcessor\l}"];
CommandLineArgumentProcessorDecorator [
shape ="record",
label = "{\<\<abstract\>\>\nCommandLineArgumentProcessorDecorator|# p : CommandLineProcessor\l|#  removeIndex(String[], int) : String[]\l}"];
CommandLineProcessor [
shape ="record",
label = "{\<\<abstract\>\>\nCommandLineProcessor||+  CommandLineProcessor() : void\l+  process(String[]) : CodeProcessor\l}"];
OutputFileCommandLineArgumentProcessorDecorator [
shape ="record",
label = "{OutputFileCommandLineArgumentProcessorDecorator||+  process(String[]) : CodeProcessor\l}"];
AccessLevelArgumentProcessor [
shape ="record",
label = "{AccessLevelArgumentProcessor||+  process(String[]) : CodeProcessor\l}"];
BasicCommandLineProcessor [
shape ="record",
label = "{BasicCommandLineProcessor||+  BasicCommandLineProcessor() : void\l+  process(String[]) : CodeProcessor\l}"];
ProgramGraph [
shape ="record",
label = "{ProgramGraph|- c : ArrayList\l- e : HashSet\l|+  ProgramGraph() : void\l+  addEdge(Edge) : void\l+  addNode(ClassNode) : void\l+  getEdges() : ArrayList\l+  getNodes() : ArrayList\l+  removeEdge(Edge) : void\l}"];
BasicNodeGenerator [
shape ="record",
label = "{BasicNodeGenerator||-  readClass(String, ProgramGraph) : void\l+  BasicNodeGenerator() : void\l+  generateNodes(ProgramGraph, String[]) : void\l}"];
INodeGenerator [
shape ="record",
label = "{\<\<interface\>\>\nINodeGenerator||+  generateNodes(ProgramGraph, String[]) : void\l}"];
RecursiveNodeGenerator [
shape ="record",
label = "{RecursiveNodeGenerator||-  readClass(String, ProgramGraph) : void\l+  RecursiveNodeGenerator() : void\l+  generateNodes(ProgramGraph, String[]) : void\l}"];
GraphBuilder [
shape ="record",
label = "{GraphBuilder|- nodeGen : INodeGenerator\l- edgeGens : ArrayList\l- edgeCheckers : ArrayList\l|-  checkEdges(ProgramGraph) : void\l-  generateEdges(ProgramGraph) : void\l-  generateNodes(ProgramGraph, String[]) : void\l+  GraphBuilder() : void\l+  addEdgeChecker(IEdgeChecker) : void\l+  addEdgeGenerator(IEdgeGenerator) : void\l+  build(String[]) : ProgramGraph\l+  setNodeGenerator(INodeGenerator) : void\l}"];
IGraphBuilder [
shape ="record",
label = "{\<\<interface\>\>\nIGraphBuilder||+  addEdgeChecker(IEdgeChecker) : void\l+  addEdgeGenerator(IEdgeGenerator) : void\l+  build(String[]) : ProgramGraph\l+  setNodeGenerator(INodeGenerator) : void\l}"];
GraphVizPrivateMethodReader [
shape ="record",
label = "{GraphVizPrivateMethodReader||+  GraphVizPrivateMethodReader() : void\l+  getMethods(ClassNode) : List\l}"];
MethodReader [
shape ="record",
label = "{\<\<interface\>\>\nMethodReader||+  getMethods(ClassNode) : List\l}"];
GraphVizProtectedMethodReader [
shape ="record",
label = "{GraphVizProtectedMethodReader||+  GraphVizProtectedMethodReader() : void\l+  getMethods(ClassNode) : List\l}"];
GraphVizPublicMethodReader [
shape ="record",
label = "{GraphVizPublicMethodReader||+  GraphVizPublicMethodReader() : void\l+  getMethods(ClassNode) : List\l}"];
GraphVizPrivateFieldReader [
shape ="record",
label = "{GraphVizPrivateFieldReader||+  GraphVizPrivateFieldReader() : void\l+  getFields(ClassNode) : List\l}"];
FieldReader [
shape ="record",
label = "{\<\<interface\>\>\nFieldReader||+  getFields(ClassNode) : List\l}"];
GraphVizProtectedFieldReader [
shape ="record",
label = "{GraphVizProtectedFieldReader||+  GraphVizProtectedFieldReader() : void\l+  getFields(ClassNode) : List\l}"];
GraphVizPublicFieldReader [
shape ="record",
label = "{GraphVizPublicFieldReader||+  GraphVizPublicFieldReader() : void\l+  getFields(ClassNode) : List\l}"];
GraphVizGraphReader [
shape ="record",
label = "{GraphVizGraphReader|- fieldReaders : ArrayList\l- methodReaders : ArrayList\l- edgeReaders : ArrayList\l|+  GraphVizGraphReader() : void\l+  addEdgeReader(IEdgeReader) : void\l+  addFieldReader(FieldReader) : void\l+  addMethodReader(MethodReader) : void\l+  parse(ProgramGraph) : String\l}"];
IGraphReader [
shape ="record",
label = "{\<\<interface\>\>\nIGraphReader||+  parse(ProgramGraph) : String\l+  addMethodReader(MethodReader) : void\l+  addFieldReader(FieldReader) : void\l+  addEdgeReader(IEdgeReader) : void\l}"];
GraphVizCodeProcessor [
shape ="record",
label = "{GraphVizCodeProcessor||+  GraphVizCodeProcessor(String[]) : void\l+  process() : void\l}"];
CodeProcessor [
shape ="record",
label = "{\<\<abstract\>\>\nCodeProcessor|# gr : IGraphReader\l# u : IUmlGenerator\l# g : IGraphBuilder\l# f : File\l# classes : String[]\l|+  CodeProcessor() : void\l+  addEdgeChecker(IEdgeChecker) : void\l+  addEdgeGenerator(IEdgeGenerator) : void\l+  addEdgeReader(IEdgeReader) : void\l+  addFieldReader(FieldReader) : void\l+  addMethodReader(MethodReader) : void\l+  process() : void\l+  setFile(File) : void\l+  setGenerator(IUmlGenerator) : void\l+  setNodeGenerator(INodeGenerator) : void\l+  setParser(IGraphReader) : void\l}"];
GraphVizGenerator [
shape ="record",
label = "{GraphVizGenerator||+  GraphVizGenerator() : void\l+  writeFile(File, String) : void\l}"];
IUmlGenerator [
shape ="record",
label = "{\<\<interface\>\>\nIUmlGenerator||+  writeFile(File, String) : void\l}"];
ExtendsEdgeGenerator [
shape ="record",
label = "{ExtendsEdgeGenerator||+  ExtendsEdgeGenerator() : void\l+  generateEdge(ProgramGraph) : void\l}"];
IEdgeGenerator [
shape ="record",
label = "{\<\<interface\>\>\nIEdgeGenerator||+  generateEdge(ProgramGraph) : void\l}"];
ExtendsEdgeReader [
shape ="record",
label = "{ExtendsEdgeReader||+  ExtendsEdgeReader() : void\l+  getEdges(ArrayList) : String\l}"];
IEdgeReader [
shape ="record",
label = "{\<\<interface\>\>\nIEdgeReader||+  getEdges(ArrayList) : String\l}"];
Application [
shape ="record",
label = "{Application||+  Application() : void\l+ static  main(String[]) : void\l}"];
CommandLineArgumentProcessorDecorator -> CommandLineProcessor [arrowhead="onormal", style="solid"];
BasicCommandLineProcessor -> CommandLineProcessor [arrowhead="onormal", style="solid"];
AccessLevelArgumentProcessor -> CommandLineArgumentProcessorDecorator [arrowhead="onormal", style="solid"];
RecursionArgumentProcessor -> CommandLineArgumentProcessorDecorator [arrowhead="onormal", style="solid"];
GraphVizCodeProcessor -> CodeProcessor [arrowhead="onormal", style="solid"];
OutputFileCommandLineArgumentProcessorDecorator -> CommandLineArgumentProcessorDecorator [arrowhead="onormal", style="solid"];
GraphVizProtectedFieldReader -> FieldReader [arrowhead="onormal", style="dashed"];
GraphVizGenerator -> IUmlGenerator [arrowhead="onormal", style="dashed"];
GraphBuilder -> IGraphBuilder [arrowhead="onormal", style="dashed"];
GraphVizPrivateMethodReader -> MethodReader [arrowhead="onormal", style="dashed"];
GraphVizGraphReader -> IGraphReader [arrowhead="onormal", style="dashed"];
RecursiveNodeGenerator -> INodeGenerator [arrowhead="onormal", style="dashed"];
GraphVizProtectedMethodReader -> MethodReader [arrowhead="onormal", style="dashed"];
GraphVizPublicMethodReader -> MethodReader [arrowhead="onormal", style="dashed"];
ExtendsEdgeReader -> IEdgeReader [arrowhead="onormal", style="dashed"];
GraphVizPublicFieldReader -> FieldReader [arrowhead="onormal", style="dashed"];
GraphVizPrivateFieldReader -> FieldReader [arrowhead="onormal", style="dashed"];
BasicNodeGenerator -> INodeGenerator [arrowhead="onormal", style="dashed"];
ExtendsEdgeGenerator -> IEdgeGenerator [arrowhead="onormal", style="dashed"];
GraphVizGraphReader -> IEdgeReader [arrowhead="ovee", style="solid", label="1..m"];
CodeProcessor -> IGraphBuilder [arrowhead="ovee", style="solid"];
GraphBuilder -> IEdgeGenerator [arrowhead="ovee", style="solid", label="1..m"];
CodeProcessor -> IUmlGenerator [arrowhead="ovee", style="solid"];
GraphVizGraphReader -> FieldReader [arrowhead="ovee", style="solid", label="1..m"];
GraphBuilder -> INodeGenerator [arrowhead="ovee", style="solid"];
GraphVizGraphReader -> MethodReader [arrowhead="ovee", style="solid", label="1..m"];
CodeProcessor -> IGraphReader [arrowhead="ovee", style="solid"];
CommandLineArgumentProcessorDecorator -> CommandLineProcessor [arrowhead="ovee", style="solid"];
RecursionArgumentProcessor -> CodeProcessor [arrowhead="ovee", style="dashed"];
IGraphReader -> IEdgeReader [arrowhead="ovee", style="dashed"];
AccessLevelArgumentProcessor -> CodeProcessor [arrowhead="ovee", style="dashed"];
IGraphReader -> ProgramGraph [arrowhead="ovee", style="dashed"];
CodeProcessor -> IEdgeGenerator [arrowhead="ovee", style="dashed"];
BasicCommandLineProcessor -> GraphVizCodeProcessor [arrowhead="ovee", style="dashed"];
INodeGenerator -> ProgramGraph [arrowhead="ovee", style="dashed"];
GraphVizGraphReader -> ProgramGraph [arrowhead="ovee", style="dashed"];
RecursionArgumentProcessor -> CommandLineProcessor [arrowhead="ovee", style="dashed"];
CodeProcessor -> IEdgeReader [arrowhead="ovee", style="dashed"];
Application -> OutputFileCommandLineArgumentProcessorDecorator [arrowhead="ovee", style="dashed"];
OutputFileCommandLineArgumentProcessorDecorator -> CommandLineProcessor [arrowhead="ovee", style="dashed"];
BasicNodeGenerator -> ProgramGraph [arrowhead="ovee", style="dashed"];
AccessLevelArgumentProcessor -> CommandLineProcessor [arrowhead="ovee", style="dashed"];
Application -> CommandLineProcessor [arrowhead="ovee", style="dashed"];
CodeProcessor -> INodeGenerator [arrowhead="ovee", style="dashed"];
GraphVizCodeProcessor -> ProgramGraph [arrowhead="ovee", style="dashed"];
IGraphBuilder -> ProgramGraph [arrowhead="ovee", style="dashed"];
IEdgeGenerator -> ProgramGraph [arrowhead="ovee", style="dashed"];
RecursiveNodeGenerator -> ProgramGraph [arrowhead="ovee", style="dashed"];
IGraphBuilder -> INodeGenerator [arrowhead="ovee", style="dashed"];
Application -> RecursionArgumentProcessor [arrowhead="ovee", style="dashed"];
CommandLineProcessor -> CodeProcessor [arrowhead="ovee", style="dashed"];
GraphBuilder -> ProgramGraph [arrowhead="ovee", style="dashed"];
OutputFileCommandLineArgumentProcessorDecorator -> CodeProcessor [arrowhead="ovee", style="dashed"];
IGraphReader -> FieldReader [arrowhead="ovee", style="dashed"];
Application -> AccessLevelArgumentProcessor [arrowhead="ovee", style="dashed"];
BasicCommandLineProcessor -> CodeProcessor [arrowhead="ovee", style="dashed"];
IGraphReader -> MethodReader [arrowhead="ovee", style="dashed"];
IGraphBuilder -> IEdgeGenerator [arrowhead="ovee", style="dashed"];
Application -> CodeProcessor [arrowhead="ovee", style="dashed"];
CodeProcessor -> FieldReader [arrowhead="ovee", style="dashed"];
CodeProcessor -> MethodReader [arrowhead="ovee", style="dashed"];
ExtendsEdgeGenerator -> ProgramGraph [arrowhead="ovee", style="dashed"];

}
